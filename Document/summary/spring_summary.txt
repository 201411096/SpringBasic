--------------------------------------------------------------------------------
스프링 프로젝트 생성
	ㄴ 1. 스프링 프로젝트 생성
	ㄴ 2. configure -> convert to maven project (pom.xml이 생성됨)
	ㄴ 3. Spring -> add spring project nature
	ㄴ 4. mvnrepository.com
		ㄴ 4_1. spring context -> 다운로드가 많은 버전으로.. -> 5.2.0 RELEASE
		ㄴ 4_2. pom.xml build 태그 아래에 dependencies 태그 안에 depency태그들로 작성을 하면 알아서 관련 라이브러리를 다운받아옴
	ㄴ ***** 프로젝트명만 문제가 생기거나, pom.xml에 문제가 생겼을 경우
		ㄴ m2.repository를 지우면 됨	
--------------------------------------------------------------------------------
Spring DI
	ㄴ Spring Bean Configuration File 생성
	ㄴ <bean>태그로 객체를 정의?..
		ㄴ <bean id= 'bean_name' class='classpath'> </bean>
			ㄴ scope='singleton'
				ㄴ xml파일을 읽어들일 때 객체를 생성함(scope의 default값)					
				ㄴ 사용법 : <bean id= 'bean_name' class='classpath' scope='singleton'> </bean>
				ㄴ spring의 singleton은 "Spring Container"에 의해 구현된다.
					ㄴ thread safety를 자동으로 보장
			ㄴ scope='prototype'
				ㄴ getBean() 메소드 호출시에 객체를 생성함
				ㄴ 사용법 : <bean id= 'bean_name' class='classpath' scope='prototype'> </bean>
	ㄴ 객체 생성법
		ㄴ ApplicationContext context = new ClassPathXmlApplicationContext(xml_file_name)
			ㄴ 설정파일을 읽어옴
		ㄴ context.getBean("", className.class);
			ㄴ .class <-> .getClass()
--------------------------------------------------------------------------------
Spring_Bean Attribute
	ㄴ class : 정규화된 자바 클래스 이름
	ㄴ id : bean의 고유 식별자
	ㄴ scope : 객체의 범위(singleton, prototype)
	ㄴ construcotr-arg : 생성시 생성자에 전달할 인수
		ㄴ bean을 생성자로 받을시에는 ref 속성에 지정 (***** value <-> ref *****)
			ㄴ 사용예시 : <constructor-arg ref="member">  </constructor-arg>
		ㄴ index와 name 속성을 이용해서 애매한 parameter를 지정가능
	ㄴ property : 생성시 bean setter에 전달할 인수
	ㄴ init method와 destroy method
--------------------------------------------------------------------------------
Spring_Bean pvalue
	ㄴ namespace에서 p체크 혹은 beans에 xmlns:p~추가
	ㄴ 쓸 일이 많지 않음	
--------------------------------------------------------------------------------
Spring_Bean annotation
	ㄴ namespace에서 context추가
	ㄴ <context:component-scan base-package="target_package"></context:component-scan>
	ㄴ annotation 종류
		ㄴ @Component : component임을 알림..
		ㄴ @Autowired : 생성자 혹은 setter가 없이 주입해주는 어노테이션(DI : Dependency Injection)
		ㄴ @Qualifier("지정하고싶은_id") : 동일한 클래스의 빈이 여러개일 경우 선택해주는 어노테이션
		ㄴ @Resource(name="지정하고싶은_id") : autowired와 qualifier를 같이 사용한 효과
	ㄴ bean을 이용해서 객체 생성시 클래스 이름에서 맨 앞글자를 소문자로 바꾼 형태로 자동으로 만들어줌