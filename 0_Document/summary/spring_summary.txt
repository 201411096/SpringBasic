--------------------------------------------------------------------------------
스프링 설치
	ㄴ 1. sts설치
	ㄴ 2. eclipse marketplace - Spring Tools 3 Add-On for Spring Tools 4 3.9.13.CI
--------------------------------------------------------------------------------
스프링 프로젝트 생성_01
	ㄴ 1. 스프링 프로젝트 생성
	ㄴ 2. configure -> convert to maven project (pom.xml이 생성됨)
	ㄴ 3. Spring -> add spring project nature
	ㄴ 4. mvnrepository.com
		ㄴ 4_1. spring context -> 다운로드가 많은 버전으로.. -> 5.2.0 RELEASE
		ㄴ 4_2. pom.xml build 태그 아래에 dependencies 태그 안에 depency태그들로 작성을 하면 알아서 관련 라이브러리를 다운받아옴
	ㄴ ***** 프로젝트명만 문제가 생기거나, pom.xml에 문제가 생겼을 경우
		ㄴ m2.repository를 지우면 됨	
--------------------------------------------------------------------------------
스프링 프로젝트 생성_02
	ㄴ 
	ㄴ tomcat 설정
		ㄴ server view에서 서버 선택 -> modules 선택 -> path를 "/project_name"으로 변경, AutoReloaded 체크해제
	ㄴ web.xml
		ㄴ webapp -> WEB-INF -> web.xml -> appServlet의 url-pattern을 원하는 대로 설정
			ㄴ ex) <url-pattern>*.do</url-pattern>
	ㄴ servlet-context.xml
		ㄴ webapp -> WEB-INF -> spring -> appServlet -> servlet-context.xml
		ㄴ scanner 폴더 선택
			ㄴ ex) <context:component-scan base-package="com.javassem" />
	ㄴ 한글 인코딩
		ㄴ webapp -> WEB-INF -> web.xml
		<!-- 한글 인코딩 -->
		<filter>
			<filter-name>characterEncoding</filter-name>
			<filter-class>org.springframework.web.filter.CharacterEncodingFilter
			</filter-class>
			<init-param>
				<param-name>encoding</param-name>
				<param-value>UTF-8</param-value>
			</init-param>
		</filter>
		<filter-mapping>
			<filter-name>characterEncoding</filter-name>
			<url-pattern>/*</url-pattern>
		</filter-mapping>
--------------------------------------------------------------------------------
DI
	ㄴ Spring Bean Configuration File 생성
	ㄴ <bean>태그로 객체를 정의?..
		ㄴ <bean id= 'bean_name' class='classpath'> </bean>
			ㄴ scope='singleton'
				ㄴ xml파일을 읽어들일 때 객체를 생성함(scope의 default값)					
				ㄴ 사용법 : <bean id= 'bean_name' class='classpath' scope='singleton'> </bean>
				ㄴ spring의 singleton은 "Spring Container"에 의해 구현된다.
					ㄴ thread safety를 자동으로 보장
			ㄴ scope='prototype'
				ㄴ getBean() 메소드 호출시에 객체를 생성함
				ㄴ 사용법 : <bean id= 'bean_name' class='classpath' scope='prototype'> </bean>
	ㄴ 객체 생성법
		ㄴ ApplicationContext context = new ClassPathXmlApplicationContext(xml_file_name)
			ㄴ 설정파일을 읽어옴
		ㄴ context.getBean("", className.class);
			ㄴ .class <-> .getClass()
				ㄴ .class 는 정적으로 클래스를 가져옴, 클래스의 이름을 통해서
				ㄴ .getClass()는 동적으로 클래스를 가져오고, 생성된 객체의 변수를 통해서 가져옴
--------------------------------------------------------------------------------
Srping Bean 관련 용어
	ㄴ Bean : Spring이 IoC 방식으로 관리하는 객체
		ㄴ Spring이 직접 생성과 제어를 담당하는 객체
	ㄴ BeanFactory : 스프링의 IoC를 담당하는 핵심 컨테이너
		ㄴ Bean을 등록, 생성,  조회, 반환하는 기능을 담당
		ㄴ BeanFactory를 바로 사용하지 않고 확장된 개념인 ApplicationContext를 주로 사용함
	ㄴ ApplicationContext : BeanFactory를 확장한 IoC 컨테이너
		ㄴ Bean을 등록하고 관리하는 기능은 BeanFactory와 동일하지만 스프링에 제공하는 각종 부가 기능이 추가로 존재함
		ㄴ 사용 예시
			ㄴ ApplicationContext context = new ClassPathXmlApplicationContext(FILE_PATH);
			ㄴ 1. BeanClassName bean = context.getBean("bean_id", BeanClassName.class);
			ㄴ 2. BeanClassName bean = (BeanClassName)context.getBean("bean_id");
				ㄴ context.getBean이 기본적으로 Object를 반환하기 때문에 두번째 인자로 ClassName.class를 입력해주거나, 형변환을 해줘야함
--------------------------------------------------------------------------------
Spring_Bean Attribute
	ㄴ class : 정규화된 자바 클래스 이름
	ㄴ id : bean의 고유 식별자
	ㄴ scope : 객체의 범위(singleton, prototype)
	ㄴ construcotr-arg : 생성시 생성자에 전달할 인수
		ㄴ bean을 생성자로 받을시에는 ref 속성에 지정 (***** value <-> ref *****)
			ㄴ 사용예시 : <constructor-arg ref="member">  </constructor-arg>
		ㄴ index와 name 속성을 이용해서 애매한 parameter를 지정가능
	ㄴ property : 생성시 bean setter에 전달할 인수
	ㄴ init method와 destroy method
--------------------------------------------------------------------------------
Spring_Bean pvalue
	ㄴ namespace에서 p체크 혹은 beans에 xmlns:p~추가
	ㄴ 쓸 일이 많지 않음	
--------------------------------------------------------------------------------
Spring_Bean Annotation
	ㄴ namespace에서 context추가
		ㄴ 사용예시 : <context:component-scan base-package="target_package"></context:component-scan>
	ㄴ Annotation 종류
		ㄴ @Component : component임을 알림..
			ㄴ@Component("별칭") : 클래스명에서 앞글자만 소문자로 바뀐 id외에 별칭으로 id를 지정하고 싶을 경우에 사용
		ㄴ @Autowired : 생성자 혹은 setter가 없이 주입해주는 어노테이션(DI : Dependency Injection)
		ㄴ @Qualifier("지정하고싶은_id") : 동일한 클래스의 빈이 여러개일 경우 선택해주는 어노테이션
		ㄴ @Resource(name="지정하고싶은_id") : autowired와 qualifier를 같이 사용한 효과
		ㄴ @Inject : @Autowired와 동일한 기능
		ㄴ 클래스를 분류하기 위한 Annotation(기본적으로 @Component를 상속한 Annotation)
			ㄴ @Service : 비즈니스 로직을 처리하는 Serivce 클래스임을 알림
			ㄴ @Repository : 데이터베이스 연동을 처리하는 DAO 클래스
			ㄴ @Controller : 사용자 요청을 제어하는 Controller 클래스
		ㄴ @RequestMapping : controller 클래스 내부 메소드들에서 사용
			ㄴ requestMapping한 함수에 return형이 String인 경우 : ViewPage를 지정한 것임
				ㄴ requestMapping한 함수가 void인 경우 : 요청과 동일한 이름의 ViewPage를 지정함
			ㄴ 사용예시 : @RequestMapping("/start.do") // start.do url이 들어올경우에만 mapping을 함
			ㄴ 사용예시2 : @RequestMapping(value={"/a.do", "/b.do"})
			ㄴ 쿼리스트링으로 넘어오는 값들은 requestMapping한 함수의 parameter로 받아올 수 있음
				ㄴ 사용예시1_1 : <a href="board/c.do?id=kim">요청3</a>
				ㄴ 사용예시1_2 : public void test2(String id) --> 위의 parameter id값을 가져옴
			ㄴ JSTL에서 parameter로 넘겨받은 값들을 받는법
				ㄴ ${param.param_name}
		ㄴ @RequestParam
			ㄴ 사용예시 : public String test(String id, @RequestParam(defaultValue = "0")int age)
				ㄴ age변수의 default값을 0으로,,
			ㄴ 사용예시 : public String test(@RequestParam(value="id")String userId, @RequestParam(defaultValue = "0")int age)
				ㄴ id값을 받아와서 userId에 넣어놓음
		ㄴ @ModelAttribute("model_attr_name")
			ㄴ model_attr_name에 해당하는 클래스의 객체로 묶어서 다음화면으로 보냄
		ㄴ@ContextConfiguration : configuration 파일 연결?...
			ㄴ 사용예시 : @ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
		ㄴ @PathVariable : request로 넘어온 변수를 받음
	ㄴ bean을 이용해서 객체 생성시 클래스 이름에서 맨 앞글자를 소문자로 바꾼 형태로 자동으로 만들어줌
--------------------------------------------------------------------------------
Spring_Bean DI
	ㄴ Autowired : setter, constructor가 없지만 Spring 내부적으로 객체를 관리해주고 그 객체를 인지하고 있음
		ㄴ 의존성 주입(Dependancy Injection)
--------------------------------------------------------------------------------
Spring Annotation 종류
	ㄴ @Component : component임을 알림..
		ㄴ@Component("별칭") : 클래스명에서 앞글자만 소문자로 바뀐 id외에 별칭으로 id를 지정하고 싶을 경우에 사용
	ㄴ @Autowired : 생성자 혹은 setter가 없이 주입해주는 어노테이션(DI : Dependency Injection)
	ㄴ @Qualifier("지정하고싶은_id") : 동일한 클래스의 빈이 여러개일 경우 선택해주는 어노테이션
	ㄴ @Resource(name="지정하고싶은_id") : autowired와 qualifier를 같이 사용한 효과
	ㄴ @Inject : @Autowired와 동일한 기능
	ㄴ 클래스를 분류하기 위한 Annotation(기본적으로 @Component를 상속한 Annotation)
		ㄴ @Service : 비즈니스 로직을 처리하는 Serivce 클래스임을 알림
		ㄴ @Repository : 데이터베이스 연동을 처리하는 DAO 클래스
		ㄴ @Controller : 사용자 요청을 제어하는 Controller 클래스
	ㄴ @RequestMapping : controller 클래스 내부 메소드들에서 사용
		ㄴ requestMapping한 함수에 return형이 String인 경우 : ViewPage를 지정한 것임
			ㄴ requestMapping한 함수가 void인 경우 : 요청과 동일한 이름의 ViewPage를 지정함
		ㄴ 사용예시 : @RequestMapping("/start.do") // start.do url이 들어올경우에만 mapping을 함
		ㄴ 사용예시2 : @RequestMapping(value={"/a.do", "/b.do"})
		ㄴ 쿼리스트링으로 넘어오는 값들은 requestMapping한 함수의 parameter로 받아올 수 있음
			ㄴ 사용예시1_1 : <a href="board/c.do?id=kim">요청3</a>
			ㄴ 사용예시1_2 : public void test2(String id) --> 위의 parameter id값을 가져옴
		ㄴ JSTL에서 parameter로 넘겨받은 값들을 받는법
			ㄴ ${param.param_name}
		ㄴ produces
			ㄴ RequestMapping으로 값을 불러올 경우( 한글화 깨짐 방지 )
			ㄴ 사용예시 : produces="application/text; charset=utf-8"
	ㄴ @RequestParam
		ㄴ 사용예시 : public String test(String id, @RequestParam(defaultValue = "0")int age)
			ㄴ age변수의 default값을 0으로,,
		ㄴ 사용예시 : public String test(@RequestParam(value="id")String userId, @RequestParam(defaultValue = "0")int age)
			ㄴ id값을 받아와서 userId에 넣어놓음
	ㄴ @ModelAttribute("model_attr_name")
		ㄴ model_attr_name에 해당하는 클래스의 객체로 묶어서 다음화면으로 보냄
	ㄴ@ContextConfiguration : configuration 파일 연결?...
		ㄴ 사용예시 : @ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")
	ㄴ @PathVariable : request로 넘어온 변수를 받음
	ㄴ @ResponseBody
		ㄴ 비동기 통신(ajax)에서 호출하는 함수에서 필요
	ㄴ @Test : 테스팅할 메소드에 지정
	ㄴ @RunWith
		ㄴ 사용예시 : @RunWith(SpringJUnit4ClassRunner.class)
	ㄴ @Log4j : lombok 필요...?
	
--------------------------------------------------------------------------------
AOP : Aspect Oriented Programming
	ㄴ 핵심기능(Business Logic)과 횡단관심사(Cross-Cutting Concern)
		ㄴ Business Logic : 업무 로직을 포함하는 기능
		ㄴ Cross-Cutting Concern : 핵심기능을 도와주는 부가기능
			ㄴ Logging
			ㄴ Security
			ㄴ Transaction
	ㄴ Application에서의 핵심적인 기능에서 부가적인 기능을 분리
		ㄴ 분리한 부가기능을 Aspect라는 독특한 Module의 형태로 만들어서 설계하고 개발하는 방법
	ㄴ 반복되는 작업들을 Advice로 묶어 원하는 호출지점인 각각의 pointcut에 weaving (기존에 반복되던 작업들을 method로 묶어서 호출하던 것과 다름)
--------------------------------------------------------------------------------
AOP 용어
	ㄴ 타겟(Target) : 핵심기능을 담고 있는 모듈로, 타겟은 부가기능을 부여할 대상
	ㄴ 어드바이스(Advice) : 횡단관심사를 실제로 구현해서 처리하는 부분
	ㄴ 조인 포인트(Join Point) : 횡단관심사가 실행되는 시점
	ㄴ 포인트컷(PointCut) : Advice를 적용할 Target의 method를 선별하는 정규표현식(Regular Expression)
	ㄴ Aspect : AOP의 단위가 되는 횡단관심사
	ㄴ Weaving : 위빙은 포인트컷에 의해서 결정된 타켓의 조인포인트에 부가기능을 삽입하는 과정
--------------------------------------------------------------------------------
AOP Advice의 종류
	ㄴ Around : JoinPoint 의 앞과 뒤에서 실행되는 Advice
	ㄴ Before
	ㄴ After
	ㄴ After Returning : Joinpoint 메소드 호출이 정상적으로 종료된 뒤에 실행되는 Advice
	ㄴ After Throwing : 예외가 던져질 때 실행되는 Advice
--------------------------------------------------------------------------------
AOP 사용 예시
	ㄴ xml 구조
		ㄴ <aop:config>
			<aop:pointcut expression="execution(access_modifier return_type_expression file_path_expression method_expression(param_type_expression) )"></aop:pointcut>
				ㄴ param_type_expression : (..) -> 매개변수를 신경쓰지 않음
			<aop:aspect id='my_aspect_id' ref='my_advice_id' order='my_aspect_sequence'>
				<aop:~>
					ㄴaop:의 종류 : aop:before, aop:around ..
				</aop:~>
			</aop:aspect>
		    </aop:config>
	ㄴ annotation 방식
		ㄴ In XML : Spring 내부적으로 자동연결하는 방법
			ㄴ <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
		ㄴ @Around("execution(access_modifier return_type_expression file_path_expression method_expression(param_type_expression) )")
		ㄴ @Aspect : Around annotation이 붙어있는 객체의 앞에 @Component와 같이 붙임
--------------------------------------------------------------------------------
Controller에서 view로 데이터를 넘기는 방법
	ㄴ 1. ModelAndView 객체를 이용
	ㄴ 2. Map 객체 (자바의 HashMap 이용)
	ㄴ 3. Model 객체 ( ******* ModelAndView 혹은 HashMap 처럼 return으로 넘기는 게 아니고 인자로 지정함 *******
		ㄴ 사용 예시 : @RequestMapping(value="/model.do")
		ㄴ 사용 예시 : public void test(Model m){
		ㄴ 사용 예시 : m.addAttribute("message", "팀원님들 뭐 하실래요"); ...}
	ㄴ 4. ModelAttribute 이용
		ㄴ 사용 방법 : @ModelAttribute("model_attr_name")
--------------------------------------------------------------------------------
Lombok
--------------------------------------------------------------------------------
Redirect 사용하는 이유
	ㄴ 새로고침 시 데이터 중복 전송을 방지?..
	ㄴ 사용방법 : @RequestMapping이 붙어있는 메소드에 String 값 반환시 앞부분에 "redirect:"추가
	ㄴ 사용예시
		ㄴ	@RequestMapping("/updateBoardContent.do")
		ㄴ	public String updateBoardContent(BoardVO vo) {
		ㄴ		service.updateBoard(vo);
		ㄴ		return "redirect:getBoardList.do";
		ㄴ	}
--------------------------------------------------------------------------------
Spring Session 사용법
	ㄴ RequestMapping된 함수에 매개변수로 HttpSession session을 추가
	ㄴ session.setAttribute
--------------------------------------------------------------------------------
Spring Session 사용예시

	@RequestMapping("/login.do")
	public String login(MemberVO vo , HttpSession session) {
		MemberVO result = memberService.idCheck_Login(vo);
		if(result==null || result.getUserId() == null) {
			return "/user/userLogin";
		}else {
			//로그인 성공
			session.setAttribute("sessionTime", new Date().toLocaleString());
			session.setAttribute("userName", result.getUserName());
		}
		return "/user/Main";
	}	
--------------------------------------------------------------------------------
페이지 전환만 수행하는 함수 (PathVariable을 이용)
	@RequestMapping("/{step}.do")
	public String insertBoard(@PathVariable String step) { //requestMapping으로 넘어온 파라미터를 지정
		return step;
	}
--------------------------------------------------------------------------------
AJAX
	ㄴ Ajax 메소드 종류
		ㄴ $.ajax() : 비동기식 Ajax를 이용하여 HTTP 요청을 전송함.
		ㄴ $.get() : 전달받은 주소로 GET 방식의 HTTP 요청을 전송함.
		ㄴ $.post() : 전달받은 주소로 POST 방식의 HTTP 요청을 전송함.
		ㄴ $.getScript() : 웹 페이지에 스크립트를 추가함.
		ㄴ $.getJSON() :  전달받은 주소로 GET 방식의 HTTP 요청을 전송하여, 응답으로 JSON 파일을 전송받음.
		ㄴ .load() : 서버에서 데이터를 읽은 후, 읽어 들인 HTML 코드를 선택한 요소에 배치함.
	ㄴ 필요한 Annotation
		ㄴ @ResponseBody
			ㄴ 비동기 통신(ajax)에서 호출하는 함수에서 필요
			ㄴ RequestMapping을 할 경우 String 반환시 String에 해당하는 페이지로 변경되는데 그걸 막아줌
--------------------------------------------------------------------------------
AJAX 사용방법
	ㄴ $.ajax({
		    // URL은 필수 요소이므로 반드시 구현해야 하는 Property입니다.
		    url : '요청 URL 주소를 입력합니다.'
		    // 다양한 속성들 중에서 필요한 Option을 선택해서 구현합니다.('[]'는 반복해서 사용할 수 있다는 의미입니다.)
		    [, Options]
		});
--------------------------------------------------------------------------------
AJAX 사용방법 <Options>
	ㄴ url : 요청이 전송되는 URL이 포함된 문자열
	ㄴ type : HTTP요청방식 (Get / Post)
	ㄴ timeout : HTTP요청에 대한 제한 시간을 지정 (단위 : ms)
	ㄴ success : HTTP 요청 성공시 이벤트 핸들러
	ㄴ error : HTTP 요청 실패시 이벤트 핸들러
	ㄴ complete : HTTP 요청 완료시 이벤트 핸들러
	ㄴ data : HTTP 요청 후 return 하는 값
	ㄴ dataType : HTTP 요청 후 return 하는 데이터의 Type을 지정
	ㄴ async : 요청시 동기 유무를 선택할 수 있음 (default = true, false)
	ㄴ cache : 브라우저에 의해 요청되는 페이지를 캐시 유무 (true, false)
	ㄴ beforeSend : HTTP 요청 전에 발생하는 이벤트 핸들러
	ㄴ global : 전역함수 활성 여부를 설정(True / False)
--------------------------------------------------------------------------------
AJAX 사용예시
	$('#userId').keyup(function(){
        // 비동기통신 ajax
		
		$.ajax({
			type:'post', /* get을 하나 post를 하나 url에 보이진 않음, 용량이 많으면 post */
			async : true, // default : true
			url : 'idCheck.do',	// 이미 url 자체가 user까지 내려온 상태임
			contentType : 'application/x-www-form-urlencoded;charset=UTF-8', /*넘어가는 데이터를 인코딩하기 위함*/
			data : "userId=" + $('#userId').val(),
			success : function(resultData) {
				$('#idCheckResult').html(resultData);
			}
		});
       
	})
--------------------------------------------------------------------------------
@RequestMapping produces 속성?
	ㄴ <controller에서 ajax로 데이터를 보낼 시 데이터 타입 지정)
	ㄴ produces="application/json" -> json형식으로 js파일에 보냄
	ㄴ produces="application/text" -> string형식으로 js파일에 보냄
		ㄴ + jackson 라이브러리 추가
--------------------------------------------------------------------------------
spring list bean 사용법 (리스트VO, 리스트객체, listVO)
	ㄴ VOList 파일 -> fDynamicWeb/src/example/member/model/MemberVOList.java
	ㄴ jsp 파일 -> UserListProperty.jsp
	ㄴ name의 요소들과 volist파일안에 선언된 리스트객체의 변수 이름이 같아야됨
	
--------------------------------------------------------------------------------
ajax 406 error 대처
	ㄴ 1. jackson-databind 라이브러리
	ㄴ 2. servlet-context.xml에 annotation-driven 태그 추가
	ㄴ 3. ResponseBody 어노테이션 선언
	ㄴ 4. RequestMapping produces="application/json"...
--------------------------------------------------------------------------------
webapp까지의 경로 얻는방법
	ㄴ tomcat 서버 설정 -> serve modules without publishing
	ㄴ request.getSession().getServletContext().getRealPath("")
		ㄴ getRealPath()의 인자로 ""만을 보내고 그 뒤로 string을 붙여서 만들 경우 target부분에 폴더가 생김
	ㄴ 사용방법
		ㄴ request.getSession().getServletContext().getRealPath("resources/imgs")
			ㄴ webapp 바로 밑의 resources 의 imgs 폴더에 생성됨
--------------------------------------------------------------------------------
spring handlerinterceptoradapter
	ㄴ prehandle
		ㄴ 컨트롤러(즉 RequestMapping이 선언된 메서드 진입) 실행 직전에 동작
	ㄴ posthandle
		ㄴ 트롤러 진입 후 view가 랜더링 되기 전 동작
	ㄴ aftercomplete
		ㄴ 컨트롤러 진입 후 view가 정상적으로 랜더링 된 후 제일 마지막에 동작
	ㄴ afterConcurrentHandlingStarted
		ㄴ 비동기 요청 시 PostHandle와 afterCompletion메서드를 수행하지 않고 이 메소드가 동작
	ㄴ 기본적인 동작 순서
		ㄴ 요청을 처리할 Handler에 가기전에 Interceptor의 preHandelr() 메소드가 호출된다.
		ㄴ 요청을 처리할 수 있는 Handler가 요청을 처리하고 retrun을 하게 되면 Interceptor의 postHandler() 메소드가 호출된다.
		ㄴ Interceptor의 posetHandler() 메소드에 정의된 모든 작업이 끝나면 View를 렌더링한다.
		ㄴ View 렌더링이 끝나면 Interceptor의 afterCompletion() 메소드가 호출된다.
		ㄴ Interceptor의 afterCompletion() 메소드에 정의된 모든 작업이 끝나면 클라이언트에게 최종적으로 Response를 전달한다.
	ㄴ multi interceptor 동작 순서
		ㄴ preHandler 1 
		ㄴ preHandler 2
		ㄴ 요청 처리 
		ㄴ postHandler 2
		ㄴ postHandler 1
		ㄴ View 렌더링
		ㄴ afterCompletion 2
		ㄴ afterCompletion 1